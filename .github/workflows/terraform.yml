name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main  # Adjust the branch you want to trigger the pipeline on

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0  # You can specify your version here

      # Step 3: Set TF_LOG environment variable for debugging (optional)
      - name: Set TF_LOG environment variable for debugging
        run: echo "TF_LOG=DEBUG" >> $GITHUB_ENV

      # Step 4: Set Terraform Cloud Token as an environment variable (if using Terraform Cloud)
      - name: Set Terraform Cloud Token
        run: echo "TFE_TOKEN=${{ secrets.TFE_TOKEN }}" >> $GITHUB_ENV

      # Step 5: Configure AWS credentials (for AWS-based providers; if using AWS)
      - name: Set AWS credentials (if using AWS provider)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: "us-east-1"  # Adjust as necessary

      # Step 6: Terraform Initialization
      - name: Terraform Init
        run: terraform init

      # Step 7: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -parallelism=10 -out=tfplan -input=false

      # Step 8: Apply the Terraform Plan (with auto-approve to bypass manual approval)
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      # Optional: Clean up after execution (if necessary)
      - name: Clean up
        run: terraform destroy -auto-approve
        if: ${{ always() }}  # This step runs even if the previous steps failed
